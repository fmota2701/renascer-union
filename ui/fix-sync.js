#!/usr/bin/env node

/**
 * Script para corrigir problemas de sincroniza√ß√£o desabilitando RLS
 */

require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');

class FixSync {
  constructor() {
    this.supabaseUrl = process.env.SUPABASE_URL;
    this.supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
    
    if (!this.supabaseUrl || !this.supabaseKey) {
      throw new Error('‚ùå Credenciais do Supabase n√£o encontradas no arquivo .env');
    }
    
    this.supabase = createClient(this.supabaseUrl, this.supabaseKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    });
  }

  async executeSQL(sql, description) {
    try {
      console.log(`üîß ${description}...`);
      const { data, error } = await this.supabase.rpc('exec_sql', {
        query: sql
      });
      
      if (error) {
        console.log(`‚ö†Ô∏è  Erro: ${error.message}`);
        return false;
      }
      
      console.log(`‚úÖ ${description} - Conclu√≠do`);
      return true;
    } catch (error) {
      console.log(`‚ùå Erro ao executar: ${error.message}`);
      return false;
    }
  }

  async fixRLS() {
    console.log('üöÄ Iniciando corre√ß√£o de sincroniza√ß√£o...');
    
    const queries = [
      {
        sql: 'ALTER TABLE players DISABLE ROW LEVEL SECURITY;',
        desc: 'Desabilitando RLS para players'
      },
      {
        sql: 'ALTER TABLE items DISABLE ROW LEVEL SECURITY;',
        desc: 'Desabilitando RLS para items'
      },
      {
        sql: 'ALTER TABLE history DISABLE ROW LEVEL SECURITY;',
        desc: 'Desabilitando RLS para history'
      },
      {
        sql: 'ALTER TABLE system_config DISABLE ROW LEVEL SECURITY;',
        desc: 'Desabilitando RLS para system_config'
      },
      {
        sql: 'GRANT ALL ON players TO anon, authenticated;',
        desc: 'Concedendo permiss√µes para players'
      },
      {
        sql: 'GRANT ALL ON items TO anon, authenticated;',
        desc: 'Concedendo permiss√µes para items'
      },
      {
        sql: 'GRANT ALL ON history TO anon, authenticated;',
        desc: 'Concedendo permiss√µes para history'
      },
      {
        sql: 'GRANT ALL ON system_config TO anon, authenticated;',
        desc: 'Concedendo permiss√µes para system_config'
      },
      {
        sql: 'GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO anon, authenticated;',
        desc: 'Concedendo permiss√µes para sequ√™ncias'
      }
    ];

    for (const query of queries) {
      await this.executeSQL(query.sql, query.desc);
      await new Promise(resolve => setTimeout(resolve, 500)); // Pequena pausa
    }
  }

  async testConnection() {
    console.log('üß™ Testando conex√£o e acesso aos dados...');
    
    try {
      const { data: players, error: playersError } = await this.supabase
        .from('players')
        .select('*')
        .limit(1);
      
      if (playersError) {
        console.log('‚ùå Erro ao acessar players:', playersError.message);
        return false;
      }
      
      const { data: items, error: itemsError } = await this.supabase
        .from('items')
        .select('*')
        .limit(1);
      
      if (itemsError) {
        console.log('‚ùå Erro ao acessar items:', itemsError.message);
        return false;
      }
      
      console.log('‚úÖ Conex√£o e acesso funcionando corretamente!');
      console.log(`üìä Players encontrados: ${players?.length || 0}`);
      console.log(`üì¶ Items encontrados: ${items?.length || 0}`);
      
      return true;
    } catch (error) {
      console.log('‚ùå Erro no teste:', error.message);
      return false;
    }
  }

  async run() {
    try {
      await this.fixRLS();
      await this.testConnection();
      console.log('\nüéâ Corre√ß√£o conclu√≠da! Os dados devem estar sincronizados agora.');
    } catch (error) {
      console.error('‚ùå Erro durante a corre√ß√£o:', error.message);
    }
  }
}

if (require.main === module) {
  (async () => {
    try {
      const fixer = new FixSync();
      await fixer.run();
    } catch (error) {
      console.error('‚ùå Erro:', error.message);
      process.exit(1);
    }
  })();
}

module.exports = FixSync;