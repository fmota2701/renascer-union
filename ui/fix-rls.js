#!/usr/bin/env node

/**
 * Script para corrigir pol√≠ticas RLS do Supabase
 */

require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

class FixRLS {
  constructor() {
    this.supabaseUrl = process.env.SUPABASE_URL;
    this.supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
    
    if (!this.supabaseUrl || !this.supabaseKey) {
      throw new Error('‚ùå Credenciais do Supabase n√£o encontradas no arquivo .env');
    }
    
    this.supabase = createClient(this.supabaseUrl, this.supabaseKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    });
  }

  async disableRLS() {
    console.log('üîß Desabilitando RLS temporariamente...');
    
    const tables = ['players', 'items', 'history', 'system_config'];
    
    for (const table of tables) {
      try {
        console.log(`üìã Desabilitando RLS para tabela ${table}...`);
        
        // Desabilitar RLS
        const { error: disableError } = await this.supabase.rpc('exec', {
          sql: `ALTER TABLE ${table} DISABLE ROW LEVEL SECURITY;`
        });
        
        if (disableError) {
          console.log(`‚ö†Ô∏è  Erro ao desabilitar RLS para ${table}:`, disableError.message);
        } else {
          console.log(`‚úÖ RLS desabilitado para ${table}`);
        }
        
      } catch (error) {
        console.log(`‚ö†Ô∏è  Erro na tabela ${table}:`, error.message);
      }
    }
  }

  async testInsert() {
    console.log('\nüß™ Testando inser√ß√£o de jogador...');
    
    try {
      const { data, error } = await this.supabase
        .from('players')
        .insert({ name: 'Teste RLS Fix', status: 'active' })
        .select()
        .single();

      if (error) {
        console.log('‚ùå Erro ao inserir jogador:', error.message);
        return false;
      }

      console.log('‚úÖ Jogador inserido com sucesso:', data);
      return true;
    } catch (error) {
      console.log('‚ùå Erro na inser√ß√£o:', error.message);
      return false;
    }
  }

  async run() {
    console.log('üöÄ Iniciando corre√ß√£o do RLS...');
    console.log(`üìç URL: ${this.supabaseUrl}`);
    
    await this.disableRLS();
    const success = await this.testInsert();
    
    if (success) {
      console.log('\n‚úÖ Corre√ß√£o conclu√≠da! O cadastro deve funcionar agora.');
    } else {
      console.log('\n‚ùå Ainda h√° problemas. Verifique as credenciais e tabelas.');
    }
    
    return success;
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  (async () => {
    try {
      const fix = new FixRLS();
      const success = await fix.run();
      process.exit(success ? 0 : 1);
    } catch (error) {
      console.error('‚ùå Erro fatal:', error.message);
      process.exit(1);
    }
  })();
}

module.exports = FixRLS;